user www-data;
worker_processes auto;
pid /run/nginx.pid;
error_log /var/log/nginx/error.log;
include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections 1024;
}

http {
    sendfile on;
    tcp_nopush on;
    types_hash_max_size 2048;
    server_tokens off;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    access_log /var/log/nginx/access.log;

    

    gzip on;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/javascript application/json text/xml application/xml application/xml+rss image/svg+xml;
    gzip_vary on;

    # Определяем директорию для HTML для ботов и обычных пользователей
    map $http_user_agent $doc_root {
        default /www/browser;
        ~*(googlebot|bingbot|yandex|baiduspider|duckduckbot|slurp) /www/server/;
    }

    # Определяем index.html для ботов и пользователей
    map $http_user_agent $doc_index {
        default index.csr.html;
        ~*(googlebot|bingbot|yandex|baiduspider|duckduckbot|slurp) index.server.html;
    }

    # Для отладки — видим, какой UA и пути выбраны
    map $http_user_agent $debug_ua {
        default "user";
        ~*(googlebot|bingbot|yandex|baiduspider|duckduckbot|slurp) "bot";
    }

    server {
        listen 80;
        server_name localhost;

        # Главная логика — отдаём разные index и root для бота и юзера
        location / {
            root $doc_root;
            index $doc_index;
            try_files $uri $uri/ /$doc_index;

            # Отладочный заголовок, чтобы видеть кто получил ответ
            add_header X-Debug-UA $debug_ua always;
            add_header X-Debug-Root $doc_root always;
            add_header X-Debug-Index $doc_index always;
        }

        # Статика (js, css, изображения) всегда из browser (общее для всех)
        location ~* \.(?:js|css|png|jpg|jpeg|json|gif|ico|svg|woff2?|ttf|eot)$ {
            root /www/browser;
            access_log off;
            expires 30d;
            add_header Cache-Control "public";
        }

        # Прокси для API
        location /api/ {
            proxy_pass http://127.0.0.1:5000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # CORS
            add_header 'Access-Control-Allow-Origin' 'http://localhost:4200' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With' always;

            if ($request_method = OPTIONS) {
                add_header 'Access-Control-Allow-Origin' 'http://192.168.31.159' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With' always;
                add_header 'Access-Control-Max-Age' 1728000;
                return 204;
            }
        }

        # Проксирование SSR-запросов на Node.js сервер
        location @ssr {
            proxy_pass http://localhost:4000;  # порт Node.js сервера
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }
    }
}
